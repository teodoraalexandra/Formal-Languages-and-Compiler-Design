%{
#include <math.h>
#include <stdio.h>
#include "y.tab.h"
int lines = 0;
%}
%option noyywrap

DIGIT 		[0-9]
NUMBER		[1-9][0-9]*|0
STRING		["]([a-zA-Z])*["]
CONSTANT    {STRING}|{NUMBER}
ID 		    [a-zA-Z][a-zA-Z0-9]{0,10}

%%

"no"	    {printf( "Reserved word: %s\n", yytext );  return no;}
"wow"       {printf( "Reserved word: %s\n", yytext );  return wow;}
"gata"	    {printf( "Reserved word: %s\n", yytext );  return gata;}
"variabila"	{printf( "Reserved word: %s\n", yytext );  return variabila;}
"boolean"	{printf( "Reserved word: %s\n", yytext );  return boolean;}
"chaar"	    {printf( "Reserved word: %s\n", yytext );  return chaar;}
"numar"	    {printf( "Reserved word: %s\n", yytext );  return numar;}
"reaal"	    {printf( "Reserved word: %s\n", yytext );  return reaal;}
"citeste"	{printf( "Reserved word: %s\n", yytext );  return citeste;}
"listeaza"	{printf( "Reserved word: %s\n", yytext );  return listeaza;}
"este"	    {printf( "Reserved word: %s\n", yytext );  return este;}
"atunci"	{printf( "Reserved word: %s\n", yytext );  return atunci;}
"sfarsit"	{printf( "Reserved word: %s\n", yytext );  return sfarsit;}
"altfel"	{printf( "Reserved word: %s\n", yytext );  return altfel;}
"cattimp"	{printf( "Reserved word: %s\n", yytext );  return cattimp;}
"executa"	{printf( "Reserved word: %s\n", yytext );  return executa;}
"bucla"	    {printf( "Reserved word: %s\n", yytext );  return bucla;}
"start"	    {printf( "Reserved word: %s\n", yytext );  return start;}
"stop"	    {printf( "Reserved word: %s\n", yytext );  return stop;}
"pas"	    {printf( "Reserved word: %s\n", yytext );  return pas;}
"si"        {printf( "Operator: %s\n", yytext ); return AND_OPERATOR;}
"sau"       {printf( "Operator: %s\n", yytext ); return OR_OPERATOR;}

{ID}	    {printf( "Identifier: %s\n", yytext ); return IDENTIFIER;}

{CONSTANT}	{printf( "Constant: %s\n", yytext ); return CONSTANT;}

":"	   {printf( "Separator: %s\n", yytext ); return COLON;}
";"	   {printf( "Separator: %s\n", yytext ); return SEMI_COLON;}
","	   {printf( "Separator: %s\n", yytext ); return COMA;}
"."	   {printf( "Separator: %s\n", yytext ); return DOT;}
"+"	   {printf( "Operator: %s\n", yytext ); return PLUS;}
"-"	   {printf( "Operator: %s\n", yytext ); return MINUS;}
"*"	   {printf( "Operator: %s\n", yytext ); return MULTIPLY;}
"/"	   {printf( "Operator: %s\n", yytext ); return DIVISION;}
"//"   {printf( "Operator: %s\n", yytext ); return FLOOR_DIVISION;}
"%"    {printf( "Operator: %s\n", yytext ); return MODULO;}
"("	   {printf( "Separator: %s\n", yytext ); return LEFT_ROUND_BRACKETS;}
")"	   {printf( "Separator: %s\n", yytext ); return RIGHT_ROUND_BRACKETS;}
"["	   {printf( "Separator: %s\n", yytext ); return LEFT_SQUARE_BRACKETS;}
"]"	   {printf( "Separator: %s\n", yytext ); return RIGHT_SQUARE_BRACKETS;}
"{"    {printf( "Separator: %s\n", yytext ); return LEFT_CURLY_BRACKETS;}
"}"    {printf( "Separator: %s\n", yytext ); return RIGHT_CURLY_BRACKETS;}
"?"    {printf( "Separator: %s\n", yytext ); return QUESTION_MARK;}
"<"	   {printf( "Operator: %s\n", yytext ); return LESS_THAN;}
">"	   {printf( "Operator: %s\n", yytext ); return GREATER_THAN;}
"<="   {printf( "Operator: %s\n", yytext ); return LESS_OR_EQUAL_THAN;}
">="   {printf( "Operator: %s\n", yytext ); return GREATER_OR_EQUAL_THAN;}
"<>"   {printf( "Operator: %s\n", yytext ); return DIFFERENT;}
"=="   {printf( "Operator: %s\n", yytext ); return EQUAL;}
"="	   {printf( "Operator: %s\n", yytext ); return ASSIGNMENT;}

[ \t]+	/* remove spaces */  	{}

[\n]+	{++lines;}

[a-zA-Z][a-zA-Z0-9]{11,}	{printf("Illegal size of the identifier at line %d\n", lines); return -1;}

[0-9][a-zA-Z0-9]{0,10}	{printf("Illegal identifier at line %d\n", lines); return -1;}

.	{printf("Illegal symbol at line\n"); return -1;}
%%
